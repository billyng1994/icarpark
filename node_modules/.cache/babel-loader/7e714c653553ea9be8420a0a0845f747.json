{"ast":null,"code":"import firebase from 'firebase';\nimport BackendAuthExtService from '../extService/BackendAuthExtService';\nexport default class AuthService {\n  constructor(onAuthStateChange) {\n    this.firebaseConfig = {\n      apiKey: \"AIzaSyA8QwQuc5kHcPXv2CSwjph2C_pznIAZZ0Y\",\n      authDomain: \"rafe-venturenix-project.firebaseapp.com\",\n      projectId: \"rafe-venturenix-project\",\n      storageBucket: \"rafe-venturenix-project.appspot.com\",\n      messagingSenderId: \"214419668077\",\n      appId: \"1:214419668077:web:be42c5b042ed852cff9364\",\n      measurementId: \"G-1HF0PJ0NTK\"\n    };\n    this.onAuthStateChange = void 0;\n    this.onAuthStateChange = onAuthStateChange;\n  } //because this idToken is needed many times\n\n\n  static getIdToken() {\n    // from reference, the false idtoken is to get the already login idtoken; if true, it will get a new token\n    if (!AuthService.isInitializing) {\n      return firebase.auth().currentUser.getIdToken(\n      /*foreceRefresh*/\n      false);\n    } else {\n      return new Promise((resolve, reject) => {\n        const unsubscribe = firebase.auth().onAuthStateChanged(user => {\n          unsubscribe();\n          resolve(user);\n        });\n      }).then(() => firebase.auth().currentUser.getIdToken(\n      /*forceRefresh*/\n      false));\n    }\n  }\n\n  init() {\n    AuthService.isInitializing = true;\n\n    if (!firebase.apps.length) {\n      firebase.initializeApp(this.firebaseConfig);\n    } else {\n      firebase.app();\n    } //below kinda blackbox, for firebase received email,password and pass it as user in onAuthStateChange function\n\n\n    firebase.auth().onAuthStateChanged(user => {\n      AuthService.isInitializing = false;\n      console.log(\"onAuthStateChanged: \", user);\n\n      if (user) {\n        //signed in\n        // Get the latest id_token from Firebase directly\n        firebase.auth().currentUser.getIdToken(false).then(idToken => {\n          BackendAuthExtService.getMyUserInfo(idToken, userInfo => {\n            // this.signedInEmail = user?.email;\n            AuthService.signedInUserInfo = userInfo;\n            console.log(\"Login Success!\", AuthService.signedInUserInfo.uid);\n            this.onAuthStateChange(false);\n          });\n        });\n      } else {\n        //signed out\n        // this.signedInEmail = undefined;\n        AuthService.signedInUserInfo = undefined;\n        this.onAuthStateChange(false);\n      }\n    });\n  }\n\n  static isSignedIn() {\n    return AuthService.signedInUserInfo !== undefined && AuthService.signedInUserInfo !== null;\n  }\n\n  signInWithEmailPassword(email, password, onError) {\n    this.onAuthStateChange(true);\n    firebase.auth().signOut().then(() => {\n      firebase.auth().signInWithEmailAndPassword(email, password).catch(error => {\n        console.log(error);\n        onError(error.code, error.message);\n        this.onAuthStateChange(false);\n      });\n    });\n  }\n\n  signInWithGoogle(onError) {\n    this.onAuthStateChange(true);\n    firebase.auth().signOut().then(() => {\n      const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\n      firebase.auth().signInWithPopup(googleAuthProvider).catch(error => {\n        console.log(error);\n        onError(error.code, error.message);\n        this.onAuthStateChange(false);\n      });\n    });\n  }\n\n  signInWithFacebook(onError) {\n    this.onAuthStateChange(true);\n    firebase.auth().signOut().then(() => {\n      const facebookAuthProvider = new firebase.auth.FacebookAuthProvider();\n      firebase.auth().signInWithPopup(facebookAuthProvider).catch(error => {\n        console.log(error);\n        onError(error.code, error.message);\n        this.onAuthStateChange(false);\n      });\n    });\n  }\n\n  signOut() {\n    this.onAuthStateChange(true);\n    firebase.auth().signOut();\n  }\n\n}\nAuthService.isInitializing = false;\nAuthService.signedInUserInfo = void 0;","map":{"version":3,"sources":["D:/Venturnix/ecommerce/ecommerce-frontend/src/service/AuthService.ts"],"names":["firebase","BackendAuthExtService","AuthService","constructor","onAuthStateChange","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","getIdToken","isInitializing","auth","currentUser","Promise","resolve","reject","unsubscribe","onAuthStateChanged","user","then","init","apps","length","initializeApp","app","console","log","idToken","getMyUserInfo","userInfo","signedInUserInfo","uid","undefined","isSignedIn","signInWithEmailPassword","email","password","onError","signOut","signInWithEmailAndPassword","catch","error","code","message","signInWithGoogle","googleAuthProvider","GoogleAuthProvider","signInWithPopup","signInWithFacebook","facebookAuthProvider","FacebookAuthProvider"],"mappings":"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","sourcesContent":["import firebase from 'firebase';\r\nimport { UserInfo } from '../domain/backendAuthDos';\r\nimport React from 'react'\r\nimport BackendAuthExtService from '../extService/BackendAuthExtService';\r\n\r\ntype OnAuthStateChange = (isLoading: boolean) => void;\r\ntype OnSignInError = (code: string, message: string) => void;\r\n\r\nexport default class AuthService {\r\n  firebaseConfig = {\r\n    apiKey: \"AIzaSyA8QwQuc5kHcPXv2CSwjph2C_pznIAZZ0Y\",\r\n    authDomain: \"rafe-venturenix-project.firebaseapp.com\",\r\n    projectId: \"rafe-venturenix-project\",\r\n    storageBucket: \"rafe-venturenix-project.appspot.com\",\r\n    messagingSenderId: \"214419668077\",\r\n    appId: \"1:214419668077:web:be42c5b042ed852cff9364\",\r\n    measurementId: \"G-1HF0PJ0NTK\"\r\n  };\r\n\r\n  static isInitializing: boolean = false;\r\n\r\n  static signedInUserInfo?: UserInfo;\r\n\r\n  onAuthStateChange: OnAuthStateChange;\r\n\r\n  constructor(onAuthStateChange: OnAuthStateChange) {\r\n    this.onAuthStateChange = onAuthStateChange;\r\n  }\r\n\r\n  //because this idToken is needed many times\r\n  static getIdToken(){\r\n    // from reference, the false idtoken is to get the already login idtoken; if true, it will get a new token\r\n    if (!AuthService.isInitializing){\r\n      return firebase.auth().currentUser!.getIdToken(/*foreceRefresh*/false)\r\n    } else {\r\n      return new Promise<firebase.User | null>((resolve, reject) =>{\r\n        const unsubscribe = firebase.auth().onAuthStateChanged((user)=>{\r\n          unsubscribe();\r\n          resolve(user);\r\n        })\r\n      }).then(()=>firebase.auth().currentUser!.getIdToken(/*forceRefresh*/false))\r\n    }\r\n    \r\n\r\n  }\r\n\r\n  init() {\r\n    AuthService.isInitializing = true;\r\n\tif (!firebase.apps.length){\r\n      firebase.initializeApp(this.firebaseConfig);\r\n    } else{\r\n      firebase.app();\r\n    }\r\n    \r\n    //below kinda blackbox, for firebase received email,password and pass it as user in onAuthStateChange function\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      AuthService.isInitializing = false;\r\n      console.log(\"onAuthStateChanged: \", user)\r\n      if (user) {\r\n        //signed in\r\n        // Get the latest id_token from Firebase directly\r\n        firebase.auth().currentUser!.getIdToken(false)\r\n          .then((idToken)=>{\r\n              BackendAuthExtService.getMyUserInfo(idToken, (userInfo)=>{\r\n                // this.signedInEmail = user?.email;\r\n                AuthService.signedInUserInfo=userInfo;\r\n                console.log(\"Login Success!\", AuthService.signedInUserInfo.uid);\r\n                this.onAuthStateChange(false);\r\n              })\r\n          })\r\n    \r\n      } else {\r\n        //signed out\r\n        // this.signedInEmail = undefined;\r\n        AuthService.signedInUserInfo = undefined;\r\n        this.onAuthStateChange(false)\r\n      }\r\n    })\r\n  }\r\n\r\n  static isSignedIn() {\r\n    return AuthService.signedInUserInfo !== undefined && AuthService.signedInUserInfo !== null;\r\n  }\r\n\r\n  signInWithEmailPassword(email: string, password: string, onError: OnSignInError) {\r\n    this.onAuthStateChange(true);\r\n\r\n    firebase.auth().signOut()\r\n      .then(() => {\r\n        firebase.auth().signInWithEmailAndPassword(email, password)\r\n          .catch((error) => {\r\n            console.log(error);\r\n            onError(error.code, error.message);\r\n            this.onAuthStateChange(false);\r\n          });\r\n      });\r\n  }\r\n\r\n  signInWithGoogle(onError: OnSignInError) {\r\n    this.onAuthStateChange(true);\r\n\r\n    firebase.auth().signOut()\r\n      .then(() => {\r\n        const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n        firebase.auth().signInWithPopup(googleAuthProvider)\r\n          .catch((error) => {\r\n            console.log(error);\r\n            onError(error.code, error.message);\r\n            this.onAuthStateChange(false);\r\n          });\r\n      });\r\n  }\r\n\r\n  signInWithFacebook(onError: OnSignInError) {\r\n    this.onAuthStateChange(true);\r\n\r\n    firebase.auth().signOut()\r\n      .then(() => {\r\n        const facebookAuthProvider = new firebase.auth.FacebookAuthProvider();\r\n        firebase.auth().signInWithPopup(facebookAuthProvider)\r\n          .catch((error) => {\r\n            console.log(error);\r\n            onError(error.code, error.message);\r\n            this.onAuthStateChange(false);\r\n          });\r\n      });\r\n  }\r\n\r\n  signOut() {\r\n    this.onAuthStateChange(true);\r\n    firebase.auth().signOut()\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}