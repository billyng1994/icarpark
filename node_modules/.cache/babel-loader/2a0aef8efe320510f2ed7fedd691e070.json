{"ast":null,"code":"import firebase from 'firebase';\nimport BackendAuthExtService from '../extService/BackendAuthExtService';\nexport default class AuthService {\n  constructor(onAuthStateChange) {\n    this.firebaseConfig = {\n      apiKey: \"AIzaSyA8QwQuc5kHcPXv2CSwjph2C_pznIAZZ0Y\",\n      authDomain: \"rafe-venturenix-project.firebaseapp.com\",\n      projectId: \"rafe-venturenix-project\",\n      storageBucket: \"rafe-venturenix-project.appspot.com\",\n      messagingSenderId: \"214419668077\",\n      appId: \"1:214419668077:web:be42c5b042ed852cff9364\",\n      measurementId: \"G-1HF0PJ0NTK\"\n    };\n    this.signedInUserInfo = void 0;\n    this.onAuthStateChange = void 0;\n\n    if (!firebase.apps.length) {\n      firebase.initializeApp(this.firebaseConfig);\n    } else {\n      firebase.app();\n    }\n\n    this.onAuthStateChange = onAuthStateChange;\n  } //because this idToken is needed many times\n\n\n  static getIdToken() {\n    return firebase.auth().currentUser.getIdToken(false); // from reference, the false idtoken is to get the already login idtoken; if true, it will get a new token\n  }\n\n  init() {\n    //below kinda blackbox, for firebase received email,password and pass it as user in onAuthStateChange function\n    firebase.auth().onAuthStateChanged(user => {\n      console.log(\"onAuthStateChanged: \", user);\n\n      if (user) {\n        //signed in\n        // Get the latest id_token from Firebase directly\n        firebase.auth().currentUser.getIdToken(false).then(idToken => {\n          BackendAuthExtService.getMyUserInfo(idToken, userInfo => {\n            // this.signedInEmail = user?.email;\n            this.signedInUserInfo = userInfo;\n            console.log(\"Login Success!\", this.signedInUserInfo.uid);\n            this.onAuthStateChange(false);\n          });\n        });\n      } else {\n        //signed out\n        // this.signedInEmail = undefined;\n        this.signedInUserInfo = undefined;\n        this.onAuthStateChange(false);\n      }\n    });\n  }\n\n  isSignedIn() {\n    return this.signedInUserInfo !== undefined && this.signedInUserInfo !== null;\n  }\n\n  signInWithEmailPassword(email, password, onError) {\n    this.onAuthStateChange(true);\n    firebase.auth().signOut().then(() => {\n      firebase.auth().signInWithEmailAndPassword(email, password).catch(error => {\n        console.log(error);\n        onError(error.code, error.message);\n        this.onAuthStateChange(false);\n      });\n    });\n  }\n\n  signInWithGoogle(onError) {\n    this.onAuthStateChange(true);\n    firebase.auth().signOut().then(() => {\n      const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\n      firebase.auth().signInWithPopup(googleAuthProvider).catch(error => {\n        console.log(error);\n        onError(error.code, error.message);\n        this.onAuthStateChange(false);\n      });\n    });\n  }\n\n  signInWithFacebook(onError) {\n    this.onAuthStateChange(true);\n    firebase.auth().signOut().then(() => {\n      const facebookAuthProvider = new firebase.auth.FacebookAuthProvider();\n      firebase.auth().signInWithPopup(facebookAuthProvider).catch(error => {\n        console.log(error);\n        onError(error.code, error.message);\n        this.onAuthStateChange(false);\n      });\n    });\n  }\n\n  signOut() {\n    this.onAuthStateChange(true);\n    firebase.auth().signOut();\n  }\n\n}","map":{"version":3,"sources":["D:/Venturnix/ecommerce/ecommerce-frontend/src/service/AuthService.ts"],"names":["firebase","BackendAuthExtService","AuthService","constructor","onAuthStateChange","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","signedInUserInfo","apps","length","initializeApp","app","getIdToken","auth","currentUser","init","onAuthStateChanged","user","console","log","then","idToken","getMyUserInfo","userInfo","uid","undefined","isSignedIn","signInWithEmailPassword","email","password","onError","signOut","signInWithEmailAndPassword","catch","error","code","message","signInWithGoogle","googleAuthProvider","GoogleAuthProvider","signInWithPopup","signInWithFacebook","facebookAuthProvider","FacebookAuthProvider"],"mappings":"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","sourcesContent":["import firebase from 'firebase';\r\nimport { UserInfo } from '../domain/backendAuthDos';\r\nimport React from 'react'\r\nimport BackendAuthExtService from '../extService/BackendAuthExtService';\r\n\r\ntype OnAuthStateChange = (isLoading: boolean) => void;\r\ntype OnSignInError = (code: string, message: string) => void;\r\n\r\nexport default class AuthService {\r\n  firebaseConfig = {\r\n    apiKey: \"AIzaSyA8QwQuc5kHcPXv2CSwjph2C_pznIAZZ0Y\",\r\n    authDomain: \"rafe-venturenix-project.firebaseapp.com\",\r\n    projectId: \"rafe-venturenix-project\",\r\n    storageBucket: \"rafe-venturenix-project.appspot.com\",\r\n    messagingSenderId: \"214419668077\",\r\n    appId: \"1:214419668077:web:be42c5b042ed852cff9364\",\r\n    measurementId: \"G-1HF0PJ0NTK\"\r\n  };\r\n\r\n\r\n  signedInUserInfo?: UserInfo;\r\n\r\n  onAuthStateChange: OnAuthStateChange;\r\n\r\n  constructor(onAuthStateChange: OnAuthStateChange) {\r\n    if (!firebase.apps.length){\r\n      firebase.initializeApp(this.firebaseConfig);\r\n    } else{\r\n      firebase.app();\r\n    }\r\n\r\n    this.onAuthStateChange = onAuthStateChange;\r\n  }\r\n\r\n  //because this idToken is needed many times\r\n  static getIdToken(){\r\n    return firebase.auth().currentUser!.getIdToken(false)\r\n    // from reference, the false idtoken is to get the already login idtoken; if true, it will get a new token\r\n  }\r\n\r\n  init() {\r\n\r\n    //below kinda blackbox, for firebase received email,password and pass it as user in onAuthStateChange function\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      console.log(\"onAuthStateChanged: \", user)\r\n      if (user) {\r\n        //signed in\r\n        // Get the latest id_token from Firebase directly\r\n        firebase.auth().currentUser!.getIdToken(false)\r\n          .then((idToken)=>{\r\n              BackendAuthExtService.getMyUserInfo(idToken, (userInfo)=>{\r\n                // this.signedInEmail = user?.email;\r\n                this.signedInUserInfo=userInfo;\r\n                console.log(\"Login Success!\", this.signedInUserInfo.uid);\r\n                this.onAuthStateChange(false);\r\n              })\r\n          })\r\n    \r\n      } else {\r\n        //signed out\r\n        // this.signedInEmail = undefined;\r\n        this.signedInUserInfo = undefined;\r\n        this.onAuthStateChange(false)\r\n      }\r\n    })\r\n  }\r\n\r\n  isSignedIn() {\r\n    return this.signedInUserInfo !== undefined && this.signedInUserInfo !== null;\r\n  }\r\n\r\n  signInWithEmailPassword(email: string, password: string, onError: OnSignInError) {\r\n    this.onAuthStateChange(true);\r\n\r\n    firebase.auth().signOut()\r\n      .then(() => {\r\n        firebase.auth().signInWithEmailAndPassword(email, password)\r\n          .catch((error) => {\r\n            console.log(error);\r\n            onError(error.code, error.message);\r\n            this.onAuthStateChange(false);\r\n          });\r\n      });\r\n  }\r\n\r\n  signInWithGoogle(onError: OnSignInError) {\r\n    this.onAuthStateChange(true);\r\n\r\n    firebase.auth().signOut()\r\n      .then(() => {\r\n        const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n        firebase.auth().signInWithPopup(googleAuthProvider)\r\n          .catch((error) => {\r\n            console.log(error);\r\n            onError(error.code, error.message);\r\n            this.onAuthStateChange(false);\r\n          });\r\n      });\r\n  }\r\n\r\n  signInWithFacebook(onError: OnSignInError) {\r\n    this.onAuthStateChange(true);\r\n\r\n    firebase.auth().signOut()\r\n      .then(() => {\r\n        const facebookAuthProvider = new firebase.auth.FacebookAuthProvider();\r\n        firebase.auth().signInWithPopup(facebookAuthProvider)\r\n          .catch((error) => {\r\n            console.log(error);\r\n            onError(error.code, error.message);\r\n            this.onAuthStateChange(false);\r\n          });\r\n      });\r\n  }\r\n\r\n  signOut() {\r\n    this.onAuthStateChange(true);\r\n    firebase.auth().signOut()\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}