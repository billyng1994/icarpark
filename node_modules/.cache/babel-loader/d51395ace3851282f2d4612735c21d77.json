{"ast":null,"code":"import axios from \"axios\";\nimport config from \"../config/config\";\nexport default class BackendExtService {\n  static getProductList(callback) {\n    axios.get(config().backend.baseUrl + \"/public/product/all\").then(response => {\n      callback(response.data);\n    });\n  }\n\n  static getProductDetail(productId, callback) {\n    axios.get(config().backend.baseUrl + \"/public/product/details?productId=\" + productId).then(response => {\n      callback(response.data);\n    });\n  }\n\n  static getShoppingCartItems(productIds, callback) {\n    axios.post(config().backend.baseUrl + \"/public/product/search/ids\", productIds).then(response => {\n      callback(response.data); // when one day DO is finally mismatch with the DTO:\n      // callback({\n      //     productName: data.name,\n      //     productPrice: data.price,\n      //     productDescription: data.description,\n      //     ...\n      // })\n    });\n  }\n\n  static checkout(idToken, items, callback) {\n    axios.post(config().backend.baseUrl + \"/transaction\", items).then(response => {\n      callback(response.data);\n    });\n  }\n\n  static getTransaction(transactionId, callback) {\n    axios.get(config().backend.baseUrl + \"/transaction/\" + transactionId).then(response => {\n      callback(response.data);\n    }); //     This is a dummy example\n    // static getTransaction(transactionId: number, callback: (data: Transaction) => void){\n    //     new Promise((resolve, reject)=>{\n    //         setTimeout(()=>{\n    //             resolve(mockCheckout as CheckoutResponseDto);\n    //         },1000);\n    //     }).then(data => {\n    //         callback(data as Transaction);\n    //     })\n  } //postPayment API\n\n\n}","map":{"version":3,"sources":["D:/Venturnix/ecommerce/ecommerce-frontend/src/extService/BackendExtService.ts"],"names":["axios","config","BackendExtService","getProductList","callback","get","backend","baseUrl","then","response","data","getProductDetail","productId","getShoppingCartItems","productIds","post","checkout","idToken","items","getTransaction","transactionId"],"mappings":"AAQA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,eAAe,MAAMC,iBAAN,CAAuB;AAEb,SAAdC,cAAc,CAACC,QAAD,EAAuC;AACzDJ,IAAAA,KAAK,CAACK,GAAN,CAAkCJ,MAAM,GAAGK,OAAT,CAAiBC,OAAjB,GAA2B,qBAA7D,EACCC,IADD,CACMC,QAAQ,IAAG;AACZL,MAAAA,QAAQ,CAACK,QAAQ,CAACC,IAAV,CAAR;AACH,KAHF;AAIF;;AACsB,SAAhBC,gBAAgB,CAACC,SAAD,EAAoBR,QAApB,EAA2D;AAChFJ,IAAAA,KAAK,CAACK,GAAN,CAAoCJ,MAAM,GAAGK,OAAT,CAAiBC,OAAjB,GAA2B,oCAA3B,GAAgEK,SAApG,EACCJ,IADD,CACMC,QAAQ,IAAI;AACZL,MAAAA,QAAQ,CAACK,QAAQ,CAACC,IAAV,CAAR;AACH,KAHH;AAID;;AAC0B,SAApBG,oBAAoB,CAACC,UAAD,EAAuBV,QAAvB,EAA0D;AACjFJ,IAAAA,KAAK,CAACe,IAAN,CAAqCd,MAAM,GAAGK,OAAT,CAAiBC,OAAjB,GAA2B,4BAAhE,EAA8FO,UAA9F,EACCN,IADD,CACMC,QAAQ,IAAI;AACdL,MAAAA,QAAQ,CAACK,QAAQ,CAACC,IAAV,CAAR,CADc,CAGd;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KAXD;AAYH;;AACc,SAARM,QAAQ,CAACC,OAAD,EAAgBC,KAAhB,EAA2Cd,QAA3C,EAAiF;AAC5FJ,IAAAA,KAAK,CAACe,IAAN,CAAgCd,MAAM,GAAGK,OAAT,CAAiBC,OAAjB,GAA2B,cAA3D,EAA2EW,KAA3E,EACCV,IADD,CACMC,QAAQ,IAAI;AACdL,MAAAA,QAAQ,CAACK,QAAQ,CAACC,IAAV,CAAR;AACH,KAHD;AAIH;;AACoB,SAAdS,cAAc,CAACC,aAAD,EAAwBhB,QAAxB,EAA8D;AAC/EJ,IAAAA,KAAK,CAACK,GAAN,CAAkCJ,MAAM,GAAGK,OAAT,CAAiBC,OAAjB,GAA2B,eAA3B,GAA4Ca,aAA9E,EACCZ,IADD,CACMC,QAAQ,IAAI;AACdL,MAAAA,QAAQ,CAACK,QAAQ,CAACC,IAAV,CAAR;AACH,KAHD,EAD+E,CAOnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,GAlDiC,CAoDlC;;;AApDkC","sourcesContent":["import React from \"react\";\r\nimport { DisplayMap, ProductItem, ProductList, ProductMap, Transaction } from \"../domain/dto/backendDos\";\r\nimport { CheckoutResponseDto, ProductDetailResponseDto, ProductListResponseDto, ShoppingCartItemsResponseDto, TransactionResponseDto } from \"../domain/dto/backendDtos\";\r\nimport mockProductList from './products.json';\r\nimport mockProductDetail from './productDetail.json';\r\nimport mockinShoppingCartItems from './shoppingCartItems.json';\r\nimport mockCheckout from './checkout.json';\r\nimport { ShoppingCartItem } from \"../domain/shoppingCartDos\";\r\nimport axios from \"axios\";\r\nimport config from \"../config/config\";\r\n\r\nexport default class BackendExtService{\r\n\r\n    static getProductList(callback: (data: ProductList) => void){\r\n       axios.get<ProductListResponseDto>(config().backend.baseUrl + \"/public/product/all\")\r\n       .then(response =>{\r\n            callback(response.data as ProductList);\r\n        })\r\n    }\r\n    static getProductDetail(productId: number, callback: (data: ProductItem) => void) {\r\n      axios.get<ProductDetailResponseDto>(config().backend.baseUrl + \"/public/product/details?productId=\"+productId)\r\n      .then(response => {\r\n            callback(response.data as ProductItem);\r\n        })\r\n    }\r\n    static getShoppingCartItems(productIds: string[], callback: (data: ProductMap)=>void){\r\n        axios.post<ProductDetailResponseDto>(config().backend.baseUrl + \"/public/product/search/ids\", productIds)\r\n        .then(response => {\r\n            callback(response.data as ProductMap);\r\n\r\n            // when one day DO is finally mismatch with the DTO:\r\n            // callback({\r\n            //     productName: data.name,\r\n            //     productPrice: data.price,\r\n            //     productDescription: data.description,\r\n            //     ...\r\n            // })\r\n        })\r\n    }\r\n    static checkout(idToken:string,items: ShoppingCartItem[], callback: (data: Transaction) => void){\r\n        axios.post<CheckoutResponseDto>(config().backend.baseUrl + \"/transaction\", items)\r\n        .then(response => { \r\n            callback(response.data as Transaction);\r\n        })\r\n    }\r\n    static getTransaction(transactionId: number, callback: (data: Transaction) => void){\r\n        axios.get<TransactionResponseDto>(config().backend.baseUrl + \"/transaction/\"+ transactionId)\r\n        .then(response => {\r\n            callback(response.data as Transaction);\r\n        })\r\n\r\n\r\n    //     This is a dummy example\r\n    // static getTransaction(transactionId: number, callback: (data: Transaction) => void){\r\n    //     new Promise((resolve, reject)=>{\r\n    //         setTimeout(()=>{\r\n    //             resolve(mockCheckout as CheckoutResponseDto);\r\n    //         },1000);\r\n    //     }).then(data => {\r\n    //         callback(data as Transaction);\r\n    //     })\r\n    }\r\n\r\n    //postPayment API\r\n}"]},"metadata":{},"sourceType":"module"}