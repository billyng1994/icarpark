{"ast":null,"code":"import mockinShoppingCartItems from './shoppingCartItems.json';\nimport mockCheckout from './checkout.json';\nimport axios from \"axios\";\nexport default class BackendExtService {\n  static getProductList(callback) {\n    axios.get(\"http://localhost:8080/product/all\").then(response => {\n      callback(response.data);\n    });\n  }\n\n  static getProductDetail(productId, callback) {\n    axios.get(\"http://localhost:8080/product/details?productId=\" + productId).then(response => {\n      callback(response.data);\n    });\n  }\n\n  static getShoppingCartItems(productIds, callback) {\n    new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve(mockinShoppingCartItems);\n      }, 1000);\n    }).then(data => {\n      callback(data); // when one day DO is finally mismatch with the DTO:\n      // callback({\n      //     productName: data.name,\n      //     productPrice: data.price,\n      //     productDescription: data.description,\n      //     ...\n      // })\n    });\n  }\n\n  static checkout(items, callback) {\n    new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve(mockCheckout);\n      }, 1000);\n    }).then(data => {\n      callback(data);\n    });\n  }\n\n  static getTransaction(transactionId, callback) {\n    new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve(mockCheckout);\n      }, 1000);\n    }).then(data => {\n      callback(data);\n    });\n  } //postPayment API\n\n\n}","map":{"version":3,"sources":["D:/Venturnix/ecommerce/ecommerce-frontend/src/extService/BackendExtService.ts"],"names":["mockinShoppingCartItems","mockCheckout","axios","BackendExtService","getProductList","callback","get","then","response","data","getProductDetail","productId","getShoppingCartItems","productIds","Promise","resolve","reject","setTimeout","checkout","items","getTransaction","transactionId"],"mappings":"AAKA,OAAOA,uBAAP,MAAoC,0BAApC;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,MAAMC,iBAAN,CAAuB;AACb,SAAdC,cAAc,CAACC,QAAD,EAAuC;AACzDH,IAAAA,KAAK,CAACI,GAAN,CAAkC,mCAAlC,EACCC,IADD,CACMC,QAAQ,IAAG;AACZH,MAAAA,QAAQ,CAACG,QAAQ,CAACC,IAAV,CAAR;AACH,KAHF;AAIF;;AACsB,SAAhBC,gBAAgB,CAACC,SAAD,EAAoBN,QAApB,EAA2D;AAChFH,IAAAA,KAAK,CAACI,GAAN,CAAoC,qDAAmDK,SAAvF,EACCJ,IADD,CACMC,QAAQ,IAAI;AACZH,MAAAA,QAAQ,CAACG,QAAQ,CAACC,IAAV,CAAR;AACH,KAHH;AAID;;AAC0B,SAApBG,oBAAoB,CAACC,UAAD,EAAuBR,QAAvB,EAA0D;AACjF,QAAIS,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AAC3BC,MAAAA,UAAU,CAAC,MAAI;AACXF,QAAAA,OAAO,CAACf,uBAAD,CAAP;AACH,OAFS,EAER,IAFQ,CAAV;AAGH,KAJD,EAIGO,IAJH,CAIQE,IAAI,IAAI;AACZJ,MAAAA,QAAQ,CAACI,IAAD,CAAR,CADY,CAGZ;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KAdD;AAeH;;AACc,SAARS,QAAQ,CAACC,KAAD,EAA4Bd,QAA5B,EAAkE;AAC7E,QAAIS,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AAC3BC,MAAAA,UAAU,CAAC,MAAI;AACXF,QAAAA,OAAO,CAACd,YAAD,CAAP;AACH,OAFS,EAER,IAFQ,CAAV;AAGH,KAJD,EAIGM,IAJH,CAIQE,IAAI,IAAI;AACZJ,MAAAA,QAAQ,CAACI,IAAD,CAAR;AACH,KAND;AAOH;;AAEoB,SAAdW,cAAc,CAACC,aAAD,EAAwBhB,QAAxB,EAA8D;AAC/E,QAAIS,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAmB;AAC3BC,MAAAA,UAAU,CAAC,MAAI;AACXF,QAAAA,OAAO,CAACd,YAAD,CAAP;AACH,OAFS,EAER,IAFQ,CAAV;AAGH,KAJD,EAIGM,IAJH,CAIQE,IAAI,IAAI;AACZJ,MAAAA,QAAQ,CAACI,IAAD,CAAR;AACH,KAND;AAOH,GAhDiC,CAkDlC;;;AAlDkC","sourcesContent":["import React from \"react\";\r\nimport { ProductItem, ProductList, ProductMap, Transaction } from \"../domain/dto/backendDos\";\r\nimport { CheckoutResponseDto, ProductDetailResponseDto, ProductListResponseDto, ShoppingCartItemsResponseDto } from \"../domain/dto/backendDtos\";\r\nimport mockProductList from './products.json';\r\nimport mockProductDetail from './productDetail.json';\r\nimport mockinShoppingCartItems from './shoppingCartItems.json';\r\nimport mockCheckout from './checkout.json';\r\nimport { ShoppingCartItem } from \"../domain/shoppingCartDos\";\r\nimport axios from \"axios\";\r\n\r\nexport default class BackendExtService{\r\n    static getProductList(callback: (data: ProductList) => void){\r\n       axios.get<ProductListResponseDto>(\"http://localhost:8080/product/all\")\r\n       .then(response =>{\r\n            callback(response.data as ProductList);\r\n        })\r\n    }\r\n    static getProductDetail(productId: number, callback: (data: ProductItem) => void) {\r\n      axios.get<ProductDetailResponseDto>(\"http://localhost:8080/product/details?productId=\"+productId)\r\n      .then(response => {\r\n            callback(response.data as ProductItem);\r\n        })\r\n    }\r\n    static getShoppingCartItems(productIds: string[], callback: (data: ProductMap)=>void){\r\n        new Promise((resolve, reject)=>{\r\n            setTimeout(()=>{\r\n                resolve(mockinShoppingCartItems as ShoppingCartItemsResponseDto);\r\n            },1000);\r\n        }).then(data => {\r\n            callback(data as ProductMap);\r\n\r\n            // when one day DO is finally mismatch with the DTO:\r\n            // callback({\r\n            //     productName: data.name,\r\n            //     productPrice: data.price,\r\n            //     productDescription: data.description,\r\n            //     ...\r\n            // })\r\n        })\r\n    }\r\n    static checkout(items: ShoppingCartItem[], callback: (data: Transaction) => void){\r\n        new Promise((resolve, reject)=>{\r\n            setTimeout(()=>{\r\n                resolve(mockCheckout as CheckoutResponseDto);\r\n            },1000);\r\n        }).then(data => {\r\n            callback(data as Transaction);\r\n        })\r\n    }\r\n\r\n    static getTransaction(transactionId: number, callback: (data: Transaction) => void){\r\n        new Promise((resolve, reject)=>{\r\n            setTimeout(()=>{\r\n                resolve(mockCheckout as CheckoutResponseDto);\r\n            },1000);\r\n        }).then(data => {\r\n            callback(data as Transaction);\r\n        })\r\n    }\r\n\r\n    //postPayment API\r\n}"]},"metadata":{},"sourceType":"module"}