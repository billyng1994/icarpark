{"ast":null,"code":"import _classCallCheck from\"D:/Venturnix/ecommerce/ecommerce-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"D:/Venturnix/ecommerce/ecommerce-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import firebase from'firebase';import BackendAuthExtService from'../extService/BackendAuthExtService';var AuthService=/*#__PURE__*/function(){function AuthService(onAuthStateChange){_classCallCheck(this,AuthService);this.firebaseConfig={apiKey:\"AIzaSyA8QwQuc5kHcPXv2CSwjph2C_pznIAZZ0Y\",authDomain:\"rafe-venturenix-project.firebaseapp.com\",projectId:\"rafe-venturenix-project\",storageBucket:\"rafe-venturenix-project.appspot.com\",messagingSenderId:\"214419668077\",appId:\"1:214419668077:web:be42c5b042ed852cff9364\",measurementId:\"G-1HF0PJ0NTK\"};this.onAuthStateChange=void 0;this.onAuthStateChange=onAuthStateChange;}//because this idToken is needed many times\n_createClass(AuthService,[{key:\"init\",value:function init(){var _this=this;AuthService.isInitializing=true;if(!firebase.apps.length){firebase.initializeApp(this.firebaseConfig);}else{firebase.app();}//below kinda blackbox, for firebase received email,password and pass it as user in onAuthStateChange function\nfirebase.auth().onAuthStateChanged(function(user){AuthService.isInitializing=false;console.log(\"onAuthStateChanged: \",user);if(user){//signed in\n// Get the latest id_token from Firebase directly\nfirebase.auth().currentUser.getIdToken(false).then(function(idToken){BackendAuthExtService.getMyUserInfo(idToken,function(userInfo){// this.signedInEmail = user?.email;\nAuthService.signedInUserInfo=userInfo;console.log(\"Login Success!\",AuthService.signedInUserInfo.uid);_this.onAuthStateChange(false);});});}else{//signed out\n// this.signedInEmail = undefined;\nAuthService.signedInUserInfo=undefined;_this.onAuthStateChange(false);}});}},{key:\"signInWithEmailPassword\",value:function signInWithEmailPassword(email,password,onError){var _this2=this;this.onAuthStateChange(true);firebase.auth().signOut().then(function(){firebase.auth().signInWithEmailAndPassword(email,password).catch(function(error){console.log(error);onError(error.code,error.message);_this2.onAuthStateChange(false);});});}},{key:\"signInWithGoogle\",value:function signInWithGoogle(onError){var _this3=this;this.onAuthStateChange(true);firebase.auth().signOut().then(function(){var googleAuthProvider=new firebase.auth.GoogleAuthProvider();firebase.auth().signInWithPopup(googleAuthProvider).catch(function(error){console.log(error);onError(error.code,error.message);_this3.onAuthStateChange(false);});});}},{key:\"signInWithFacebook\",value:function signInWithFacebook(onError){var _this4=this;this.onAuthStateChange(true);firebase.auth().signOut().then(function(){var facebookAuthProvider=new firebase.auth.FacebookAuthProvider();firebase.auth().signInWithPopup(facebookAuthProvider).catch(function(error){console.log(error);onError(error.code,error.message);_this4.onAuthStateChange(false);});});}},{key:\"signOut\",value:function signOut(){this.onAuthStateChange(true);firebase.auth().signOut();}}],[{key:\"getIdToken\",value:function getIdToken(){// from reference, the false idtoken is to get the already login idtoken; if true, it will get a new token\nif(!AuthService.isInitializing){return firebase.auth().currentUser.getIdToken(/*foreceRefresh*/false);}else{return new Promise(function(resolve,reject){var unsubscribe=firebase.auth().onAuthStateChanged(function(user){unsubscribe();resolve(user);});}).then(function(){return firebase.auth().currentUser.getIdToken(/*forceRefresh*/false);});}}},{key:\"isSignedIn\",value:function isSignedIn(){return AuthService.signedInUserInfo!==undefined&&AuthService.signedInUserInfo!==null;}}]);return AuthService;}();AuthService.isInitializing=false;AuthService.signedInUserInfo=void 0;export{AuthService as default};","map":{"version":3,"sources":["D:/Venturnix/ecommerce/ecommerce-frontend/src/service/AuthService.ts"],"names":["firebase","BackendAuthExtService","AuthService","onAuthStateChange","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","isInitializing","apps","length","initializeApp","app","auth","onAuthStateChanged","user","console","log","currentUser","getIdToken","then","idToken","getMyUserInfo","userInfo","signedInUserInfo","uid","undefined","email","password","onError","signOut","signInWithEmailAndPassword","catch","error","code","message","googleAuthProvider","GoogleAuthProvider","signInWithPopup","facebookAuthProvider","FacebookAuthProvider","Promise","resolve","reject","unsubscribe"],"mappings":"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","sourcesContent":["import firebase from 'firebase';\r\nimport { UserInfo } from '../domain/backendAuthDos';\r\nimport React from 'react'\r\nimport BackendAuthExtService from '../extService/BackendAuthExtService';\r\n\r\ntype OnAuthStateChange = (isLoading: boolean) => void;\r\ntype OnSignInError = (code: string, message: string) => void;\r\n\r\nexport default class AuthService {\r\n  firebaseConfig = {\r\n    apiKey: \"AIzaSyA8QwQuc5kHcPXv2CSwjph2C_pznIAZZ0Y\",\r\n    authDomain: \"rafe-venturenix-project.firebaseapp.com\",\r\n    projectId: \"rafe-venturenix-project\",\r\n    storageBucket: \"rafe-venturenix-project.appspot.com\",\r\n    messagingSenderId: \"214419668077\",\r\n    appId: \"1:214419668077:web:be42c5b042ed852cff9364\",\r\n    measurementId: \"G-1HF0PJ0NTK\"\r\n  };\r\n\r\n  static isInitializing: boolean = false;\r\n\r\n  static signedInUserInfo?: UserInfo;\r\n\r\n  onAuthStateChange: OnAuthStateChange;\r\n\r\n  constructor(onAuthStateChange: OnAuthStateChange) {\r\n    this.onAuthStateChange = onAuthStateChange;\r\n  }\r\n\r\n  //because this idToken is needed many times\r\n  static getIdToken(){\r\n    // from reference, the false idtoken is to get the already login idtoken; if true, it will get a new token\r\n    if (!AuthService.isInitializing){\r\n      return firebase.auth().currentUser!.getIdToken(/*foreceRefresh*/false)\r\n    } else {\r\n      return new Promise<firebase.User | null>((resolve, reject) =>{\r\n        const unsubscribe = firebase.auth().onAuthStateChanged((user)=>{\r\n          unsubscribe();\r\n          resolve(user);\r\n        })\r\n      }).then(()=>firebase.auth().currentUser!.getIdToken(/*forceRefresh*/false))\r\n    }\r\n    \r\n\r\n  }\r\n\r\n  init() {\r\n    AuthService.isInitializing = true;\r\n\tif (!firebase.apps.length){\r\n      firebase.initializeApp(this.firebaseConfig);\r\n    } else{\r\n      firebase.app();\r\n    }\r\n    \r\n    //below kinda blackbox, for firebase received email,password and pass it as user in onAuthStateChange function\r\n    firebase.auth().onAuthStateChanged((user) => {\r\n      AuthService.isInitializing = false;\r\n      console.log(\"onAuthStateChanged: \", user)\r\n      if (user) {\r\n        //signed in\r\n        // Get the latest id_token from Firebase directly\r\n        firebase.auth().currentUser!.getIdToken(false)\r\n          .then((idToken)=>{\r\n              BackendAuthExtService.getMyUserInfo(idToken, (userInfo)=>{\r\n                // this.signedInEmail = user?.email;\r\n                AuthService.signedInUserInfo=userInfo;\r\n                console.log(\"Login Success!\", AuthService.signedInUserInfo.uid);\r\n                this.onAuthStateChange(false);\r\n              })\r\n          })\r\n    \r\n      } else {\r\n        //signed out\r\n        // this.signedInEmail = undefined;\r\n        AuthService.signedInUserInfo = undefined;\r\n        this.onAuthStateChange(false)\r\n      }\r\n    })\r\n  }\r\n\r\n  static isSignedIn() {\r\n    return AuthService.signedInUserInfo !== undefined && AuthService.signedInUserInfo !== null;\r\n  }\r\n\r\n  signInWithEmailPassword(email: string, password: string, onError: OnSignInError) {\r\n    this.onAuthStateChange(true);\r\n\r\n    firebase.auth().signOut()\r\n      .then(() => {\r\n        firebase.auth().signInWithEmailAndPassword(email, password)\r\n          .catch((error) => {\r\n            console.log(error);\r\n            onError(error.code, error.message);\r\n            this.onAuthStateChange(false);\r\n          });\r\n      });\r\n  }\r\n\r\n  signInWithGoogle(onError: OnSignInError) {\r\n    this.onAuthStateChange(true);\r\n\r\n    firebase.auth().signOut()\r\n      .then(() => {\r\n        const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n        firebase.auth().signInWithPopup(googleAuthProvider)\r\n          .catch((error) => {\r\n            console.log(error);\r\n            onError(error.code, error.message);\r\n            this.onAuthStateChange(false);\r\n          });\r\n      });\r\n  }\r\n\r\n  signInWithFacebook(onError: OnSignInError) {\r\n    this.onAuthStateChange(true);\r\n\r\n    firebase.auth().signOut()\r\n      .then(() => {\r\n        const facebookAuthProvider = new firebase.auth.FacebookAuthProvider();\r\n        firebase.auth().signInWithPopup(facebookAuthProvider)\r\n          .catch((error) => {\r\n            console.log(error);\r\n            onError(error.code, error.message);\r\n            this.onAuthStateChange(false);\r\n          });\r\n      });\r\n  }\r\n\r\n  signOut() {\r\n    this.onAuthStateChange(true);\r\n    firebase.auth().signOut()\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}